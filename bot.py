import requests
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message
import logging
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import pytz  # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å —á–∞—Å–æ–≤—ã–º–∏ –ø–æ—è—Å–∞–º–∏

# –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ Telegram-–±–æ—Ç–∞
TOKEN = '7876708159:AAE5wutIy1k-qU0qPw8m_mTm_5f9dLXUWkw'

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥—Ä—É–ø–ø—ã –∏ —Ç–æ–ø–∏–∫–∞
GROUP_ID = -1002080353046  # ID –≤–∞—à–µ–π –∑–∞–∫—Ä—ã—Ç–æ–π –≥—Ä—É–ø–ø—ã
TOPIC_ID = 34445           # ID —Ç–æ–ø–∏–∫–∞ –≤ –≥—Ä—É–ø–ø–µ

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∞–∫–∞–Ω—Å–∏–π
is_live = False
last_sent_vacancy_id = None

def get_max_salary_vacancy():
    """–ü–æ–ª—É—á–∞–µ–º –≤–∞–∫–∞–Ω—Å–∏—é —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –∑–∞—Ä–ø–ª–∞—Ç–æ–π —á–µ—Ä–µ–∑ API HeadHunter"""
    url = 'https://api.hh.ru/vacancies'

    # –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—É "–≤—á–µ—Ä–∞" (–¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å)
    yesterday = datetime.now() - timedelta(days=1)
    date_from = yesterday.strftime('%Y-%m-%d')
    params = {
        'text': '—ç–∫—Å–∫—É—Ä—Å–æ–≤–æ–¥',  # –ò—â–µ–º —Ç–æ–ª—å–∫–æ —ç–∫—Å–∫—É—Ä—Å–æ–≤–æ–¥–æ–≤
        'area': 1,             # –ú–æ—Å–∫–≤–∞ (ID —Ä–µ–≥–∏–æ–Ω–∞)
        'per_page': 10,        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        'page': 0,             # –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        'date_from': date_from # –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    }
    try:
        logger.info("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API HeadHunter...")
        response = requests.get(url, params=params)
        data = response.json()
        if 'items' not in data or not data['items']:
            logger.warning("–ù–µ—Ç –≤–∞–∫–∞–Ω—Å–∏–π –≤ –æ—Ç–≤–µ—Ç–µ API.")
            return None, None
        max_salary = None
        best_vacancy = None
        best_vacancy_id = None
        for item in data['items']:
            title = item['name'].strip()
            link = item['alternate_url']
            company = item['employer']['name'] if item['employer'] else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
            salary = item['salary']
            vacancy_id = item['id']
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–∞–∫–∞–Ω—Å–∏—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –¥–ª—è –ú–æ—Å–∫–≤—ã
            area = item.get('area', {}).get('name', '').lower()
            if '–º–æ—Å–∫–≤–∞' not in area:
                logger.info(f"–í–∞–∫–∞–Ω—Å–∏—è {title} –Ω–µ –¥–ª—è –ú–æ—Å–∫–≤—ã. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                continue
            # –ò—Å–∫–ª—é—á–∞–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏ —Å —É–¥–∞–ª—ë–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º —Ä–∞–±–æ—Ç—ã
            schedule = item.get('schedule', {}).get('name', '').lower()
            if '—É–¥–∞–ª—ë–Ω–Ω–æ' in schedule or 'remote' in schedule:
                logger.info(f"–í–∞–∫–∞–Ω—Å–∏—è {title} —Å —É–¥–∞–ª—ë–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º —Ä–∞–±–æ—Ç—ã. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                continue
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–∏ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ —Å–ª–æ–≤–æ "—ç–∫—Å–∫—É—Ä—Å–æ–≤–æ–¥"
            if title.lower() != '—ç–∫—Å–∫—É—Ä—Å–æ–≤–æ–¥':
                logger.info(f"–í–∞–∫–∞–Ω—Å–∏—è {title} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¢–û–õ–¨–ö–û —Å–ª–æ–≤–æ '—ç–∫—Å–∫—É—Ä—Å–æ–≤–æ–¥'. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                continue
            salary_value = 0
            salary_text = "–ó–∞—Ä–ø–ª–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
            if salary:
                salary_value = salary.get('to', 0) or salary.get('from', 0)
                salary_text = f"{salary.get('from', '')} - {salary.get('to', '')} {salary.get('currency', '')}"
            if salary_value > (max_salary or 0):
                max_salary = salary_value
                best_vacancy = f"üíº {title}\nüè¢ {company}\nüí∞ {salary_text}\nüîó {link}\n"
                best_vacancy_id = vacancy_id
        return best_vacancy, best_vacancy_id
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ API: {e}")
        return None, None

async def send_daily_vacancy():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–∞–∫–∞–Ω—Å–∏—é –≤ –≥—Ä—É–ø–ø—É —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏"""
    global last_sent_vacancy_id
    if not is_live:
        logger.info("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π –æ—Ç–∫–ª—é—á–µ–Ω–∞.")
        return
    logger.info("–ü–æ–ª—É—á–∞–µ–º –≤–∞–∫–∞–Ω—Å–∏—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É...")
    vacancy, vacancy_id = get_max_salary_vacancy()
    if not vacancy:
        logger.info("–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–∞–∫–∞–Ω—Å–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.")
        return
    if vacancy_id == last_sent_vacancy_id:
        logger.info("–≠—Ç–∞ –≤–∞–∫–∞–Ω—Å–∏—è —É–∂–µ –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ä–∞–Ω–µ–µ. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
        return
    try:
        await bot.send_message(
            chat_id=GROUP_ID,
            message_thread_id=TOPIC_ID,
            text=vacancy
        )
        logger.info(f"–í–∞–∫–∞–Ω—Å–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –≥—Ä—É–ø–ø—É: {vacancy}")
        last_sent_vacancy_id = vacancy_id
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –≤ –≥—Ä—É–ø–ø—É: {e}")

@dp.message(Command("start"))
async def start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    logger.info("–ö–æ–º–∞–Ω–¥–∞ /start –ø–æ–ª—É—á–µ–Ω–∞")
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –≤–∞–∫–∞–Ω—Å–∏—é —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –∑–∞—Ä–ø–ª–∞—Ç–æ–π –¥–ª—è —ç–∫—Å–∫—É—Ä—Å–æ–≤–æ–¥–æ–≤ –≤ –ú–æ—Å–∫–≤–µ.")

@dp.message(Command("okmne"))
async def send_best_vacancy(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /okmne"""
    logger.info("–ö–æ–º–∞–Ω–¥–∞ /okmne –ø–æ–ª—É—á–µ–Ω–∞")
    await message.answer("–ò—â—É –≤–∞–∫–∞–Ω—Å–∏—é —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –∑–∞—Ä–ø–ª–∞—Ç–æ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å...")
    vacancy, _ = get_max_salary_vacancy()
    if vacancy:
        await message.answer(vacancy)
    else:
        await message.answer("–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–∞–∫–∞–Ω—Å–∏–π.")

@dp.message(Command("live"))
async def enable_live(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /live"""
    global is_live
    is_live = True
    logger.info("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π –≤–∫–ª—é—á–µ–Ω–∞.")
    await message.answer("–ë–æ—Ç —Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏ –≤ –≥—Ä—É–ø–ø—É —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏ –≤ 10:00.")
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –≤–∞–∫–∞–Ω—Å–∏—é –≤ –≥—Ä—É–ø–ø—É
    vacancy, _ = get_max_salary_vacancy()
    if vacancy:
        try:
            await bot.send_message(
                chat_id=GROUP_ID,
                message_thread_id=TOPIC_ID,
                text=vacancy
            )
            await message.answer("–¢–µ–∫—É—â–∞—è –≤–∞–∫–∞–Ω—Å–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –≥—Ä—É–ø–ø—É.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –≤ –≥—Ä—É–ø–ø—É: {e}")
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é –≤ –≥—Ä—É–ø–ø—É.")
    else:
        await message.answer("–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–∞–∫–∞–Ω—Å–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.")

@dp.message(Command("nolive"))
async def disable_live(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /nolive"""
    global is_live
    is_live = False
    logger.info("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π –æ—Ç–∫–ª—é—á–µ–Ω–∞.")
    await message.answer("–ë–æ—Ç –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏ –≤ –≥—Ä—É–ø–ø—É.")

@dp.message(Command("mnelive"))
async def send_best_vacancy_to_group(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /mnelive"""
    logger.info("–ö–æ–º–∞–Ω–¥–∞ /mnelive –ø–æ–ª—É—á–µ–Ω–∞")
    await message.answer("–ò—â—É –≤–∞–∫–∞–Ω—Å–∏—é —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –∑–∞—Ä–ø–ª–∞—Ç–æ–π –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é –µ—ë –≤ –≥—Ä—É–ø–ø—É...")

    # –ü–æ–ª—É—á–∞–µ–º –ª—É—á—à—É—é –≤–∞–∫–∞–Ω—Å–∏—é
    vacancy, vacancy_id = get_max_salary_vacancy()
    if not vacancy:
        await message.answer("–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–∞–∫–∞–Ω—Å–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–∞ –≤–∞–∫–∞–Ω—Å–∏—è –Ω–µ –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ä–∞–Ω–µ–µ
    global last_sent_vacancy_id
    if vacancy_id == last_sent_vacancy_id:
        await message.answer("–≠—Ç–∞ –≤–∞–∫–∞–Ω—Å–∏—è —É–∂–µ –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ä–∞–Ω–µ–µ.")
        return

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∞–∫–∞–Ω—Å–∏—é –≤ –≥—Ä—É–ø–ø—É
        await bot.send_message(
            chat_id=GROUP_ID,
            message_thread_id=TOPIC_ID,
            text=vacancy
        )
        logger.info(f"–í–∞–∫–∞–Ω—Å–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –≥—Ä—É–ø–ø—É: {vacancy}")
        last_sent_vacancy_id = vacancy_id
        await message.answer("–í–∞–∫–∞–Ω—Å–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –≥—Ä—É–ø–ø—É!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –≤ –≥—Ä—É–ø–ø—É: {e}")
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é –≤ –≥—Ä—É–ø–ø—É.")

async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    scheduler = AsyncIOScheduler(timezone=pytz.timezone('Europe/Moscow'))  # –£–∫–∞–∑—ã–≤–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
    scheduler.add_job(send_daily_vacancy, 'cron', hour=10, minute=0)
    scheduler.start()
    await dp.start_polling(bot)

if __name__ == '__main__':
    import asyncio
    asyncio.run(main())