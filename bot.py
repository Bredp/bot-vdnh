import requests
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message
import logging
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import pytz  # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å —á–∞—Å–æ–≤—ã–º–∏ –ø–æ—è—Å–∞–º–∏

# –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ Telegram-–±–æ—Ç–∞
TOKEN = '7876708159:AAE5wutIy1k-qU0qPw8m_mTm_5f9dLXUWkw'

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥—Ä—É–ø–ø—ã –∏ —Ç–æ–ø–∏–∫–∞
GROUP_ID = -1002080353046  # ID –≤–∞—à–µ–π –∑–∞–∫—Ä—ã—Ç–æ–π –≥—Ä—É–ø–ø—ã
TOPIC_ID = 34445           # ID —Ç–æ–ø–∏–∫–∞ –≤ –≥—Ä—É–ø–ø–µ

# Client ID –∏ Client Secret –¥–ª—è API HH (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ —Ç–µ–∫—É—â–µ–º –∫–æ–¥–µ)
HH_CLIENT_ID = "NJK9I7I86SHNDQGU0EFC48C3J29U453TOS91F7NSQPHCHBAEIFDAHNOBBQ03NH0M"
HH_CLIENT_SECRET = "T078KE2BT3H2AO95EI04IAU5KAD67ULEN8BUUDO00CU8724V2R9O2K7KUO2LP820"

def get_top_vacancies(count=10):
    """–ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø –≤–∞–∫–∞–Ω—Å–∏–π —á–µ—Ä–µ–∑ API HeadHunter"""
    url = 'https://api.hh.ru/vacancies'
    yesterday = datetime.now() - timedelta(days=1)
    date_from = yesterday.strftime('%Y-%m-%d')
    params = {
        'text': '—ç–∫—Å–∫—É—Ä—Å–æ–≤–æ–¥ OR –≥–∏–¥ OR "—ç–∫—Å–∫—É—Ä—Å–æ–≤–æ–¥ –≥–∏–¥"',  # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        'area': 1,          # –ú–æ—Å–∫–≤–∞ (ID —Ä–µ–≥–∏–æ–Ω–∞)
        'per_page': 100,    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        'page': 0,          # –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        'date_from': date_from  # –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    }
    try:
        response = requests.get(url, params=params)
        data = response.json()
        if 'items' not in data or not data['items']:
            return []
        
        vacancies_with_salary = []  # –í–∞–∫–∞–Ω—Å–∏–∏ —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –∑–∞—Ä–ø–ª–∞—Ç–æ–π
        vacancies_without_salary = []  # –í–∞–∫–∞–Ω—Å–∏–∏ –±–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–π –∑–∞—Ä–ø–ª–∞—Ç—ã
        
        required_keywords = {"—ç–∫—Å–∫—É—Ä—Å–æ–≤–æ–¥", "–≥–∏–¥", "—ç–∫—Å–∫—É—Ä—Å–æ–≤–æ–¥ –≥–∏–¥"}  # –¢—Ä–µ–±—É–µ–º—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        
        for item in data['items']:
            title = item['name'].strip().lower()  # –ü—Ä–∏–≤–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            link = item['alternate_url']
            company = item['employer']['name'] if item['employer'] else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
            salary = item['salary']
            vacancy_id = item['id']
            area = item.get('area', {}).get('name', '').lower()
            schedule = item.get('schedule', {}).get('name', '').lower()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–∞–∫–∞–Ω—Å–∏—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –¥–ª—è –ú–æ—Å–∫–≤—ã
            if '–º–æ—Å–∫–≤–∞' not in area:
                continue
            # –ò—Å–∫–ª—é—á–∞–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏ —Å —É–¥–∞–ª—ë–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º —Ä–∞–±–æ—Ç—ã
            if '—É–¥–∞–ª—ë–Ω–Ω–æ' in schedule or 'remote' in schedule:
                continue
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–¥–Ω–æ –∏–∑ —Ç—Ä–µ–±—É–µ–º—ã—Ö —Å–ª–æ–≤
            if not any(keyword in title for keyword in required_keywords):
                continue
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—Ä–ø–ª–∞—Ç—ã
            salary_value = 0
            salary_text = "–ó–∞—Ä–ø–ª–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
            if salary:
                currency = salary.get('currency', '').upper()
                if currency == 'RUR' or currency == 'RUB':  # –ó–∞–º–µ–Ω—è–µ–º RUR/RUB –Ω–∞ —Å–∏–º–≤–æ–ª —Ä—É–±–ª—è
                    currency = '‚ÇΩ'
                from_value = salary.get('from', None)
                to_value = salary.get('to', None)
                if from_value and to_value:
                    salary_text = f"{from_value} - {to_value} {currency}"
                    salary_value = to_value
                elif from_value:
                    salary_text = f"–û—Ç {from_value} {currency}"
                    salary_value = from_value
                elif to_value:
                    salary_text = f"–î–æ {to_value} {currency}"
                    salary_value = to_value
            
            # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–∏
            vac = {
                'id': vacancy_id,
                'title': item['name'],  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
                'company': company,
                'salary': salary_text,
                'link': link,
                'salary_value': salary_value
            }
            
            if salary_value > 0:  # –ï—Å–ª–∏ –µ—Å—Ç—å –∑–∞—Ä–ø–ª–∞—Ç–∞, –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ —Å –∑–∞—Ä–ø–ª–∞—Ç–æ–π
                vacancies_with_salary.append(vac)
            else:  # –ò–Ω–∞—á–µ –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –±–µ–∑ –∑–∞—Ä–ø–ª–∞—Ç—ã
                vacancies_without_salary.append(vac)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏ —Å –∑–∞—Ä–ø–ª–∞—Ç–æ–π –ø–æ —É–±—ã–≤–∞–Ω–∏—é
        vacancies_with_salary.sort(key=lambda x: x['salary_value'], reverse=True)
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å–ø–∏—Å–∫–∏: —Å–Ω–∞—á–∞–ª–∞ —Å –∑–∞—Ä–ø–ª–∞—Ç–æ–π, –∑–∞—Ç–µ–º –±–µ–∑ –∑–∞—Ä–ø–ª–∞—Ç—ã
        all_vacancies = vacancies_with_salary + vacancies_without_salary
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–µ count –≤–∞–∫–∞–Ω—Å–∏–π
        return all_vacancies[:count]
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ API: {e}")
        return []

@dp.message(Command("okmne"))
async def send_top_vacancies(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /okmne"""
    logger.info("–ö–æ–º–∞–Ω–¥–∞ /okmne –ø–æ–ª—É—á–µ–Ω–∞")
    await message.answer("–ò—â—É —Ç–æ–ø-10 –≤–∞–∫–∞–Ω—Å–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å...")
    vacancies = get_top_vacancies(10)  # –ü–æ–ª—É—á–∞–µ–º 10 –≤–∞–∫–∞–Ω—Å–∏–π
    if not vacancies:
        await message.answer("–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–∞–∫–∞–Ω—Å–∏–π.")
        return
    response = ""
    for idx, vac in enumerate(vacancies, start=1):
        response += f"{idx}. üíº {vac['title']}\nüè¢ {vac['company']}\nüí∞ {vac['salary']}\nüîó {vac['link']}\n\n"
    await message.answer(response)

@dp.message(Command("1", "2", "3", "4", "5", "6", "7", "8", "9", "10"))
async def send_specific_vacancy(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /1, /2, ..., /10"""
    cmd = message.text[1:]
    idx = int(cmd)
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /{cmd} –ø–æ–ª—É—á–µ–Ω–∞")
    vacancies = get_top_vacancies(10)  # –ü–æ–ª—É—á–∞–µ–º 10 –≤–∞–∫–∞–Ω—Å–∏–π
    if not vacancies:
        await message.answer("–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–∞–∫–∞–Ω—Å–∏–π.")
        return
    if 1 <= idx <= len(vacancies):
        vac = vacancies[idx - 1]
        vacancy_text = f"üíº {vac['title']}\nüè¢ {vac['company']}\nüí∞ {vac['salary']}\nüîó {vac['link']}"
        try:
            await bot.send_message(
                chat_id=GROUP_ID,
                message_thread_id=TOPIC_ID,
                text=vacancy_text
            )
            await message.answer(f"–í–∞–∫–∞–Ω—Å–∏—è ‚Ññ{idx} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –≥—Ä—É–ø–ø—É!")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –≤ –≥—Ä—É–ø–ø—É: {e}")
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é –≤ –≥—Ä—É–ø–ø—É.")
    else:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –≤–∞–∫–∞–Ω—Å–∏–∏.")

async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    scheduler = AsyncIOScheduler(timezone=pytz.timezone('Europe/Moscow'))
    scheduler.start()
    await dp.start_polling(bot)

if __name__ == '__main__':
    import asyncio
    asyncio.run(main())